<?php

/**
 * @file
 * Install file for Adserve module.
 * 
 */

/**
 * Implements hook_install().
 *
 * This hook is called when the user enables the module for the first time
 * (or on subsequent enables after the module has been uninstalled). So it's
 * a good place to define our new node type.
 *
 * We will:
 * - Add the body field.
 * - Configure the body field.
 * - Create color, quantity, and image fields.
 * - Create color, quantity, and image instances.
 *
 * @see node_type_set_defaults()
 * @see field_info_instance()
 * @see field_update_instance()
 * @see field_create_field()
 * @see field_create_instance()
 * @ingroup adserve
 */
function adserve_install() {
  // During installation, the t() function is unavailable, so we use get_t()
  // to store the name of the translation function.
  $t = get_t();

  // We define the node type as an associative array.
  $adserve = array(
    'type' => 'adserve',
    'name' => $t('Adserve Ad'),
    // 'base' tells Drupal the base string for hook functions.
    // This is often the module name; if base is set to 'mymodule', Drupal
    // would call mymodule_insert() or similar for node hooks.
    // In this case, we set base equal to 'node_content' so Drupal will handle
    // our node as if we had designed it in the UI.
    'base' => 'node_content',
    'description' => $t('This is an Adserve Ad Node type storing ads for rotation'),
    //'body_label' => $t('Ad Description'),
    'custom' => TRUE,
    'title_label' => $t('Ad Title'),
    'locked' => 1, 
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($adserve);
  //node_add_body_field($content_type);

  // Save the content type
  node_type_save($content_type);


  // Load the instance definition for our content type's body
  // http://api.drupal.org/api/function/field_info_instance/7
  /*
  $body_instance = field_info_instance('node', 'body', 'adserve');
  $body_instance['label'] = $adserve['body_label'];
  $body_instance['weight'] = 5;
  $body_instance['settings'] = array(
    'rows' => 5,
    'weight' => 5,
  );
  // Add our adserve_list view mode to the body instance display by
  // instructing the body to display as a summary
  $body_instance['display']['adserve_list'] = array(
    'label' => 'hidden',
    'type' => 'text_summary_or_trimmed',
  );

  // Save our changes to the body field instance.
  // http://api.drupal.org/api/function/field_update_instance/7
  field_update_instance($body_instance);
  */

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_adserve_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_adserve_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $adserve['type'];
    field_create_instance($instance);
  }
}

/**
 * Implements hook_uninstall().
 *
 * This hook is called when the user not only has disabled the module,
 * but also uninstalls it from the 'uninstall' tab in the module page.
 *
 * So it's a perfect time to remove our fields and instances and new
 * node type from the database.
 *
 * @ingroup adserve
 */
function adserve_uninstall() {
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'adserve'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_adserve_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the adserve
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'adserve');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('adserve');

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is factored into this function so it can be used in both
 * adserve_install() and adserve_uninstall().
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 *
 * @ingroup adserve
 */
 

function _adserve_installed_fields() {
  $t = get_t();
  return array(
    'adserve_target_url' => array(
      'field_name' => 'adserve_target_url', 
      'type'        => 'text',
      'cardinality' => 1,
      'settings'    => array(
        'max_length' => 200,
      ),
    ),
    'adserve_display_text' => array(
      'field_name'  => 'adserve_display_text',
      'type'        => 'text',
      'cardinality' => 1,      
      'settings'    => array(
        'max_length' => 100,
      ),
    ), 
   
    'adserve_display_url' => array(
      'field_name'  => 'adserve_display_url',
      'type'        => 'text',
      'cardinality' => 1,      
      'settings'    => array(
        'max_length' => 40,
      ),
    ), 
    'adserve_weight' => array(
      'field_name'  => 'adserve_weight', 
      'type'        => 'text',
      'cardinality' => 1,      
      'settings'    => array(
        'max_length' => 10,
      ),
    ), 
    'adserve_group' => array(
      'field_name'  => 'adserve_group', 
      'type'        => 'text',
      'cardinality' => 1,      
      'settings'    => array(
        'max_length' => 50,
      ),
    ), 
    'adserve_cookie_url' => array(
      'field_name'  => 'adserve_cookie_url', 
      'type'        => 'text',
      'cardinality' => -1,      
      'settings'    => array(
        'max_length' => 200,
      ),
    ),  
  );
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "adserve_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This is factored into this function so it can be used in both
 * adserve_install() and adserve_uninstall().
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  node type.
 *
 * @ingroup adserve
 */
 // adserve_target_url, adserve_display_text, adserve_display_url, adserve_weight
 // adserve_group, adserve_cookie_url 
function _adserve_installed_instances() {
  $t = get_t();
  return array(
    
    'adserve_display_text' => array(
      'field_name'  => 'adserve_display_text',
      'label'       => $t('Ad Display text'),
      'description' => $t('Maximum 95 characters together with title'),
      'type'        => 'text',
      'widget'      => array(
        'type'      => 'text_textfield',
      ),
      'weight'      => -5,
      'required'    => TRUE,
      'display'     => array(
        'adserve_list' => array(
          'label'   => 'hidden',
          'type'    => 'hidden',
        ),
      ),
    ),
    'adserve_display_url' => array(
      'field_name'  => 'adserve_display_url',
      'label'       => $t('Ad Display URL'),
      'description' => $t('Short display domain URL, maximum 35 characters'),
      'type'        => 'text',
      'widget'      => array(
        'type'      => 'text_textfield',
      ),
      'weight'      => -4,
      'required'    => TRUE,
      'display'     => array(
        'adserve_list' => array(
          'label'   => 'hidden',
          'type'    => 'hidden',
        ),
      ),
    ),
   
    'adserve_target_url' => array(
      'field_name'  => 'adserve_target_url',
      'label'       => $t('Destination URL'),
      'description' => $t('Target URL for this Ad, tracking will be appended automatically'),
      'widget'      => array(
        'type'      => 'text_textfield',
      ),
      'weight'      => -3,
      'required'    => TRUE,
      'display'     => array(
        'adserve_list' => array(
          'label'   => 'hidden',
          'type'    => 'hidden',
        ),
      ),
    ),
    
    'adserve_weight' => array(
      'field_name'  => 'adserve_weight',
      'label'       => $t('Ad Weight'),
      'description' => $t('Suggestion: set equal to estimated Ad conversion value'),
      'type'        => 'text',
      'widget'      => array(
        'type'      => 'text_textfield',
      ),
      'weight'      => -2,
      'display'     => array(
        'adserve_list' => array(
          'label'   => 'hidden',
          'type'    => 'hidden',
        ),
      ),
    ),
    
    'adserve_group' => array(
      'field_name'  => 'adserve_group',
      'label'       => $t('Ad Group'),
      'description' => $t('Any label used to group ads in report'),
      'type'        => 'text',
      'widget'      => array(
        'type'      => 'text_textfield',
      ),
      'weight'      => -1,
      'display'     => array(
        'adserve_list' => array(
          'label'   => 'hidden',
          'type'    => 'hidden',
        ),
      ),
    ),
    
    'adserve_cookie_url' => array(
      'field_name'  => 'adserve_cookie_url',
      'label'       => $t('Cookie URLs'),
      'description' => $t('Optional URLs to load in a one-pixel image to set a remote server cookie. Good for setting affiliate cookies.'),
      'type'        => 'text',
      'widget'      => array(
        'type'      => 'text_textfield',
      ),
      'weight'      => 0,
      'display'     => array(
        'adserve_list' => array(
          'label'   => 'hidden',
          'type'    => 'hidden',
        ),
      ),
    ),
     
    
 
  );
}

/**
 * Implements hook_schema().
 *
 * @ingroup adserve
 */
function adserve_schema() {
  $schema['adserve_ad'] = array(
    'description' => 'Stores information about current ads.',
    'fields' => array(
    
      'adid'    => array(
        'description' => 'Node ID of ad.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),  
      'display_title' => array(
        'description' => 'Ad Display Title',
        'type' => 'varchar',
        'length' => 25,
        'not null' => TRUE,
      ),
      'display_text' => array(
        'description' => 'Ad Display Text',
        'type' => 'varchar',
        'length' => 90,
        'not null' => TRUE,
      ),   
      'display_url' => array(
        'description' => 'Ad Display URL',
        'type' => 'varchar',
        'length' => 90,
        'not null' => TRUE,
      ),   
      'url' => array(
        'description' => 'Ad Display URL',
        'type' => 'varchar',
        'length' => 250,
        'not null' => TRUE,
      ),   
      'cookie_urls' => array(
        'description' => 'Optional Cookie URLs',
        'type' => 'varchar',
        'length' => 2500,
        'not null' => TRUE,
      ),  
      'total_clicks' => array(
        'description' => 'Total Running clicks to let us select quickly',
        'type' => 'int', 
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'total_ctr' => array(
        'description' => 'Total Running CTR to let us select quickly',
        'type' => 'float', 
        'default' => 0,
      ),
      'weight' => array(
        'description' => 'Weight based on estimated conversion value',
        'type' => 'float', 
        'default' => 1,
      ),  
      'uid' => array(
        'description' => 'User ?',
        'type' => 'int', 
        'default' => 1,
      ),  
    ),
    'primary key' => array('adid'),
    'indexes' => array(
      'ctr'   => array('total_ctr'),
    ),
  );
  
  $schema['adserve_impression'] = array(
    'description' => 'Stores information about ad impressions.',
    'fields' => array(
    
      'impid'    => array(
        'description' => 'Impression id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE, 
      ), 
      'adid' => array(
        'description' => 'Ad ID',
        'type' => 'int', 
        'unsigned' => TRUE,
        'not null' => TRUE, 
        'default' => 1,
      ), 
      'pgid' => array(
        'description' => 'Impression Page',
        'type' => 'int', 
        'unsigned' => TRUE,
        'not null' => TRUE, 
        'default' => 1,
      ), 
      'imp_date' => array(
        'description' => 'Timestamp',
        'type' => 'int', 
        'unsigned' => TRUE,
        'not null' => TRUE, 
        'default' => 1,
      ), 
      'ip' => array(
        'description' => 'IP Address of Browser',
        'type' => 'int', 
        'unsigned' => TRUE,
        'not null' => TRUE, 
        'default' => 1,
      ), 
      'format' => array(
        'description' => 'Ad Format',
        'type' => 'varchar', 
        'length' => 25,
        'not null' => TRUE,
      ), 
      'style' => array(
        'description' => 'Ad CSS Style',
        'type' => 'varchar', 
        'length' => 25,
        'not null' => TRUE,
      ), 
      'clicked' => array(
        'description' => 'Record Click',
        'type' => 'int', 
        'unsigned' => TRUE,
        'not null' => TRUE, 
        'default' => 0,
      ), 
    ),  
    'primary key' => array('impid'),
    'indexes' => array(
      'adid'   => array('adid'),
      'pgid'   => array('pgid'),      
      'imp_date' => array('imp_date'),   
      'clicked' => array('clicked'),      
    ),
  ); 
  
  $schema['adserve_page'] = array(
    'description' => 'Domain and path of pages showing ads',
    'fields' => array(
    
      'pgid'    => array(
        'description' => 'ID of page',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE, 
      ),  
      'domain' => array(
        'description' => 'Domain part of URL',
        'type' => 'varchar',
        'length' => 25,
        'not null' => TRUE,
      ),
      'nid'    => array(
        'description' => 'Node ID of page',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),  
      'path' => array(
        'description' => 'Path part of URL',
        'type' => 'varchar',
        'length' => 90,
        'not null' => TRUE,
      ),  
        
    ),
    'primary key' => array('pgid'),
    'indexes' => array(
      'domain'  => array('domain'),
      'path'   => array('path'),
    ),
  );
  
  
  
  return $schema;
}
